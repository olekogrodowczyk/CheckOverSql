/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(body: RegisterUserCommand | undefined): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Account/register';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRegister(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRegister(<any>response_);
            } catch (e) {
              return <Observable<Int32Result>>(<any>_observableThrow(e));
            }
          } else
            return <Observable<Int32Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processRegister(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  login(body: LoginUserCommand | undefined): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Account/login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLogin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLogin(<any>response_);
            } catch (e) {
              return <Observable<Int32Result>>(<any>_observableThrow(e));
            }
          } else
            return <Observable<Int32Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processLogin(response: HttpResponseBase): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

@Injectable()
export class ApiClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  database(body: SendQueryAdminCommand | undefined): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Database';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDatabase(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDatabase(<any>response_);
            } catch (e) {
              return <Observable<Int32Result>>(<any>_observableThrow(e));
            }
          } else
            return <Observable<Int32Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processDatabase(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  exercise(body: CreateExerciseCommand | undefined): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Exercise';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processExercise(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processExercise(<any>response_);
            } catch (e) {
              return <Observable<Int32Result>>(<any>_observableThrow(e));
            }
          } else
            return <Observable<Int32Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processExercise(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  group(body: CreateGroupCommand | undefined): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Group';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGroup(<any>response_);
            } catch (e) {
              return <Observable<Int32Result>>(<any>_observableThrow(e));
            }
          } else
            return <Observable<Int32Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processGroup(response: HttpResponseBase): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  invitation(
    body: CreateInvitationCommand | undefined
  ): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Invitation';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processInvitation(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processInvitation(<any>response_);
            } catch (e) {
              return <Observable<Int32Result>>(<any>_observableThrow(e));
            }
          } else
            return <Observable<Int32Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processInvitation(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  solution(
    body: CreateSolutionCommand | undefined
  ): Observable<GetComparisonDtoResult> {
    let url_ = this.baseUrl + '/api/Solution';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSolution(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSolution(<any>response_);
            } catch (e) {
              return <Observable<GetComparisonDtoResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetComparisonDtoResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processSolution(
    response: HttpResponseBase
  ): Observable<GetComparisonDtoResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetComparisonDtoResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

@Injectable()
export class ExerciseClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getallcreated(): Observable<GetExerciseDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Exercise/getallcreated';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetallcreated(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetallcreated(<any>response_);
            } catch (e) {
              return <Observable<GetExerciseDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetExerciseDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetallcreated(
    response: HttpResponseBase
  ): Observable<GetExerciseDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetExerciseDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  getallpublic(): Observable<GetExerciseDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Exercise/getallpublic';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetallpublic(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetallpublic(<any>response_);
            } catch (e) {
              return <Observable<GetExerciseDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetExerciseDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetallpublic(
    response: HttpResponseBase
  ): Observable<GetExerciseDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetExerciseDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  assignexercise(
    id: number,
    body: AssignExerciseToUsersCommand | undefined
  ): Observable<Int32IEnumerableResult> {
    let url_ = this.baseUrl + '/api/Exercise/assignexercise/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAssignexercise(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAssignexercise(<any>response_);
            } catch (e) {
              return <Observable<Int32IEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<Int32IEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processAssignexercise(
    response: HttpResponseBase
  ): Observable<Int32IEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32IEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

@Injectable()
export class GroupClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getusergroups(): Observable<GetGroupDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Group/getusergroups';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetusergroups(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetusergroups(<any>response_);
            } catch (e) {
              return <Observable<GetGroupDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetGroupDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetusergroups(
    response: HttpResponseBase
  ): Observable<GetGroupDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetGroupDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  deletegroup(groupId: number): Observable<Result> {
    let url_ = this.baseUrl + '/api/Group/deletegroup/{groupId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{groupId}', encodeURIComponent('' + groupId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeletegroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeletegroup(<any>response_);
            } catch (e) {
              return <Observable<Result>>(<any>_observableThrow(e));
            }
          } else return <Observable<Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processDeletegroup(response: HttpResponseBase): Observable<Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  getallassignments(
    groupId: number
  ): Observable<GetAssignmentDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Group/getallassignments/{groupId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{groupId}', encodeURIComponent('' + groupId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetallassignments(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetallassignments(<any>response_);
            } catch (e) {
              return <Observable<GetAssignmentDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetAssignmentDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetallassignments(
    response: HttpResponseBase
  ): Observable<GetAssignmentDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetAssignmentDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

@Injectable()
export class InvitationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param queryType (optional)
   * @return Success
   */
  getall(
    queryType: string | undefined
  ): Observable<GetInvitationDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Invitation/getall?';
    if (queryType === null)
      throw new Error("The parameter 'queryType' cannot be null.");
    else if (queryType !== undefined)
      url_ += 'queryType=' + encodeURIComponent('' + queryType) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetall(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetall(<any>response_);
            } catch (e) {
              return <Observable<GetInvitationDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetInvitationDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetall(
    response: HttpResponseBase
  ): Observable<GetInvitationDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetInvitationDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  accept(invitationId: number): Observable<Result> {
    let url_ = this.baseUrl + '/api/Invitation/accept/{invitationId}';
    if (invitationId === undefined || invitationId === null)
      throw new Error("The parameter 'invitationId' must be defined.");
    url_ = url_.replace(
      '{invitationId}',
      encodeURIComponent('' + invitationId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('patch', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAccept(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAccept(<any>response_);
            } catch (e) {
              return <Observable<Result>>(<any>_observableThrow(e));
            }
          } else return <Observable<Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processAccept(response: HttpResponseBase): Observable<Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  reject(invitationId: number): Observable<Result> {
    let url_ = this.baseUrl + '/api/Invitation/reject/{invitationId}';
    if (invitationId === undefined || invitationId === null)
      throw new Error("The parameter 'invitationId' must be defined.");
    url_ = url_.replace(
      '{invitationId}',
      encodeURIComponent('' + invitationId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('patch', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processReject(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processReject(<any>response_);
            } catch (e) {
              return <Observable<Result>>(<any>_observableThrow(e));
            }
          } else return <Observable<Result>>(<any>_observableThrow(response_));
        })
      );
  }

  protected processReject(response: HttpResponseBase): Observable<Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

@Injectable()
export class SolutionClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getall(): Observable<GetSolutionDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solution/getall';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetall(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetall(<any>response_);
            } catch (e) {
              return <Observable<GetSolutionDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetSolutionDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetall(
    response: HttpResponseBase
  ): Observable<GetSolutionDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolutionDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @param exerciseId (optional)
   * @return Success
   */
  getquerydata(
    exerciseId: number | undefined,
    solutionId: number
  ): Observable<StringIEnumerableIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solution/getquerydata/{solutionId}?';
    if (solutionId === undefined || solutionId === null)
      throw new Error("The parameter 'solutionId' must be defined.");
    url_ = url_.replace('{solutionId}', encodeURIComponent('' + solutionId));
    if (exerciseId === null)
      throw new Error("The parameter 'exerciseId' cannot be null.");
    else if (exerciseId !== undefined)
      url_ += 'exerciseId=' + encodeURIComponent('' + exerciseId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetquerydata(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetquerydata(<any>response_);
            } catch (e) {
              return <Observable<StringIEnumerableIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<StringIEnumerableIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetquerydata(
    response: HttpResponseBase
  ): Observable<StringIEnumerableIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringIEnumerableIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

@Injectable()
export class SolvingClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getall(): Observable<GetSolvingDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solving/getall';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetall(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetall(<any>response_);
            } catch (e) {
              return <Observable<GetSolvingDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetSolvingDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetall(
    response: HttpResponseBase
  ): Observable<GetSolvingDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolvingDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  getbyid(solvingId: number): Observable<GetSolvingDtoResult> {
    let url_ = this.baseUrl + '/api/Solving/getbyid/{solvingId}';
    if (solvingId === undefined || solvingId === null)
      throw new Error("The parameter 'solvingId' must be defined.");
    url_ = url_.replace('{solvingId}', encodeURIComponent('' + solvingId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetbyid(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetbyid(<any>response_);
            } catch (e) {
              return <Observable<GetSolvingDtoResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetSolvingDtoResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetbyid(
    response: HttpResponseBase
  ): Observable<GetSolvingDtoResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolvingDtoResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }

  /**
   * @return Success
   */
  getalltodo(): Observable<GetSolvingDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solving/getalltodo';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetalltodo(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetalltodo(<any>response_);
            } catch (e) {
              return <Observable<GetSolvingDtoIEnumerableResult>>(
                (<any>_observableThrow(e))
              );
            }
          } else
            return <Observable<GetSolvingDtoIEnumerableResult>>(
              (<any>_observableThrow(response_))
            );
        })
      );
  }

  protected processGetalltodo(
    response: HttpResponseBase
  ): Observable<GetSolvingDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (<any>response).error instanceof Blob
        ? (<any>response).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolvingDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(<any>null);
  }
}

export class AssignExerciseToUsersCommand
  implements IAssignExerciseToUsersCommand
{
  exerciseId?: number;
  groupId?: number;
  deadLine?: Date;

  constructor(data?: IAssignExerciseToUsersCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.exerciseId = _data['exerciseId'];
      this.groupId = _data['groupId'];
      this.deadLine = _data['deadLine']
        ? new Date(_data['deadLine'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): AssignExerciseToUsersCommand {
    data = typeof data === 'object' ? data : {};
    let result = new AssignExerciseToUsersCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['exerciseId'] = this.exerciseId;
    data['groupId'] = this.groupId;
    data['deadLine'] = this.deadLine
      ? this.deadLine.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IAssignExerciseToUsersCommand {
  exerciseId?: number;
  groupId?: number;
  deadLine?: Date;
}

export class CreateExerciseCommand implements ICreateExerciseCommand {
  title?: string | undefined;
  description?: string | undefined;
  maxPoints?: number;
  database?: string | undefined;
  validAnswer?: string | undefined;
  isPrivate?: boolean;

  constructor(data?: ICreateExerciseCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.description = _data['description'];
      this.maxPoints = _data['maxPoints'];
      this.database = _data['database'];
      this.validAnswer = _data['validAnswer'];
      this.isPrivate = _data['isPrivate'];
    }
  }

  static fromJS(data: any): CreateExerciseCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateExerciseCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['description'] = this.description;
    data['maxPoints'] = this.maxPoints;
    data['database'] = this.database;
    data['validAnswer'] = this.validAnswer;
    data['isPrivate'] = this.isPrivate;
    return data;
  }
}

export interface ICreateExerciseCommand {
  title?: string | undefined;
  description?: string | undefined;
  maxPoints?: number;
  database?: string | undefined;
  validAnswer?: string | undefined;
  isPrivate?: boolean;
}

export class CreateGroupCommand implements ICreateGroupCommand {
  name?: string | undefined;

  constructor(data?: ICreateGroupCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
    }
  }

  static fromJS(data: any): CreateGroupCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateGroupCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    return data;
  }
}

export interface ICreateGroupCommand {
  name?: string | undefined;
}

export class CreateInvitationCommand implements ICreateInvitationCommand {
  receiverEmail?: string | undefined;
  roleName?: string | undefined;
  groupId?: number;

  constructor(data?: ICreateInvitationCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.receiverEmail = _data['receiverEmail'];
      this.roleName = _data['roleName'];
      this.groupId = _data['groupId'];
    }
  }

  static fromJS(data: any): CreateInvitationCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateInvitationCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['receiverEmail'] = this.receiverEmail;
    data['roleName'] = this.roleName;
    data['groupId'] = this.groupId;
    return data;
  }
}

export interface ICreateInvitationCommand {
  receiverEmail?: string | undefined;
  roleName?: string | undefined;
  groupId?: number;
}

export class CreateSolutionCommand implements ICreateSolutionCommand {
  query?: string | undefined;
  exerciseId?: number;

  constructor(data?: ICreateSolutionCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.query = _data['query'];
      this.exerciseId = _data['exerciseId'];
    }
  }

  static fromJS(data: any): CreateSolutionCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateSolutionCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['query'] = this.query;
    data['exerciseId'] = this.exerciseId;
    return data;
  }
}

export interface ICreateSolutionCommand {
  query?: string | undefined;
  exerciseId?: number;
}

export class ErrorResult implements IErrorResult {
  message?: string | undefined;
  errors?: { [key: string]: string[] } | undefined;
  success?: boolean;

  constructor(data?: IErrorResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      if (_data['errors']) {
        this.errors = {} as any;
        for (let key in _data['errors']) {
          if (_data['errors'].hasOwnProperty(key))
            (<any>this.errors)![key] =
              _data['errors'][key] !== undefined ? _data['errors'][key] : [];
        }
      }
      this.success = _data['success'];
    }
  }

  static fromJS(data: any): ErrorResult {
    data = typeof data === 'object' ? data : {};
    let result = new ErrorResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    if (this.errors) {
      data['errors'] = {};
      for (let key in this.errors) {
        if (this.errors.hasOwnProperty(key))
          (<any>data['errors'])[key] = this.errors[key];
      }
    }
    data['success'] = this.success;
    return data;
  }
}

export interface IErrorResult {
  message?: string | undefined;
  errors?: { [key: string]: string[] } | undefined;
  success?: boolean;
}

export class GetAssignmentDto implements IGetAssignmentDto {
  user?: GetUserDto;
  role?: string | undefined;
  joined?: Date | undefined;

  constructor(data?: IGetAssignmentDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user = _data['user']
        ? GetUserDto.fromJS(_data['user'])
        : <any>undefined;
      this.role = _data['role'];
      this.joined = _data['joined']
        ? new Date(_data['joined'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetAssignmentDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetAssignmentDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    data['role'] = this.role;
    data['joined'] = this.joined ? this.joined.toISOString() : <any>undefined;
    return data;
  }
}

export interface IGetAssignmentDto {
  user?: GetUserDto;
  role?: string | undefined;
  joined?: Date | undefined;
}

export class GetAssignmentDtoIEnumerableResult
  implements IGetAssignmentDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetAssignmentDto[] | undefined;

  constructor(data?: IGetAssignmentDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GetAssignmentDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetAssignmentDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetAssignmentDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetAssignmentDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetAssignmentDto[] | undefined;
}

export class GetComparisonDto implements IGetComparisonDto {
  solutionId?: number;
  solutionSolver?: string | undefined;
  exerciseId?: number;
  exerciseTitle?: string | undefined;
  createdAt?: Date;
  result?: boolean;

  constructor(data?: IGetComparisonDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.solutionId = _data['solutionId'];
      this.solutionSolver = _data['solutionSolver'];
      this.exerciseId = _data['exerciseId'];
      this.exerciseTitle = _data['exerciseTitle'];
      this.createdAt = _data['createdAt']
        ? new Date(_data['createdAt'].toString())
        : <any>undefined;
      this.result = _data['result'];
    }
  }

  static fromJS(data: any): GetComparisonDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetComparisonDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['solutionId'] = this.solutionId;
    data['solutionSolver'] = this.solutionSolver;
    data['exerciseId'] = this.exerciseId;
    data['exerciseTitle'] = this.exerciseTitle;
    data['createdAt'] = this.createdAt
      ? this.createdAt.toISOString()
      : <any>undefined;
    data['result'] = this.result;
    return data;
  }
}

export interface IGetComparisonDto {
  solutionId?: number;
  solutionSolver?: string | undefined;
  exerciseId?: number;
  exerciseTitle?: string | undefined;
  createdAt?: Date;
  result?: boolean;
}

export class GetComparisonDtoResult implements IGetComparisonDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetComparisonDto;

  constructor(data?: IGetComparisonDtoResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      this.value = _data['value']
        ? GetComparisonDto.fromJS(_data['value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetComparisonDtoResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetComparisonDtoResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetComparisonDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetComparisonDto;
}

export class GetExerciseDto implements IGetExerciseDto {
  id?: number;
  title?: string | undefined;
  description?: string | undefined;
  maxPoints?: number;
  creator?: string | undefined;
  databaseId?: number;
  validAnswer?: string | undefined;

  constructor(data?: IGetExerciseDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.maxPoints = _data['maxPoints'];
      this.creator = _data['creator'];
      this.databaseId = _data['databaseId'];
      this.validAnswer = _data['validAnswer'];
    }
  }

  static fromJS(data: any): GetExerciseDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetExerciseDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['description'] = this.description;
    data['maxPoints'] = this.maxPoints;
    data['creator'] = this.creator;
    data['databaseId'] = this.databaseId;
    data['validAnswer'] = this.validAnswer;
    return data;
  }
}

export interface IGetExerciseDto {
  id?: number;
  title?: string | undefined;
  description?: string | undefined;
  maxPoints?: number;
  creator?: string | undefined;
  databaseId?: number;
  validAnswer?: string | undefined;
}

export class GetExerciseDtoIEnumerableResult
  implements IGetExerciseDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetExerciseDto[] | undefined;

  constructor(data?: IGetExerciseDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GetExerciseDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetExerciseDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetExerciseDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetExerciseDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetExerciseDto[] | undefined;
}

export class GetGroupDto implements IGetGroupDto {
  id?: number;
  name?: string | undefined;

  constructor(data?: IGetGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any): GetGroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetGroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    return data;
  }
}

export interface IGetGroupDto {
  id?: number;
  name?: string | undefined;
}

export class GetGroupDtoIEnumerableResult
  implements IGetGroupDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetGroupDto[] | undefined;

  constructor(data?: IGetGroupDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GetGroupDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetGroupDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetGroupDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetGroupDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetGroupDto[] | undefined;
}

export class GetInvitationDto implements IGetInvitationDto {
  id?: number;
  groupName?: string | undefined;
  sender?: string | undefined;
  receiver?: string | undefined;
  status?: string | undefined;
  roleName?: string | undefined;
  sentAt?: Date;
  answeredAt?: Date;

  constructor(data?: IGetInvitationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.groupName = _data['groupName'];
      this.sender = _data['sender'];
      this.receiver = _data['receiver'];
      this.status = _data['status'];
      this.roleName = _data['roleName'];
      this.sentAt = _data['sentAt']
        ? new Date(_data['sentAt'].toString())
        : <any>undefined;
      this.answeredAt = _data['answeredAt']
        ? new Date(_data['answeredAt'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetInvitationDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetInvitationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['groupName'] = this.groupName;
    data['sender'] = this.sender;
    data['receiver'] = this.receiver;
    data['status'] = this.status;
    data['roleName'] = this.roleName;
    data['sentAt'] = this.sentAt ? this.sentAt.toISOString() : <any>undefined;
    data['answeredAt'] = this.answeredAt
      ? this.answeredAt.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IGetInvitationDto {
  id?: number;
  groupName?: string | undefined;
  sender?: string | undefined;
  receiver?: string | undefined;
  status?: string | undefined;
  roleName?: string | undefined;
  sentAt?: Date;
  answeredAt?: Date;
}

export class GetInvitationDtoIEnumerableResult
  implements IGetInvitationDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetInvitationDto[] | undefined;

  constructor(data?: IGetInvitationDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GetInvitationDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetInvitationDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetInvitationDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetInvitationDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetInvitationDto[] | undefined;
}

export class GetSolutionDto implements IGetSolutionDto {
  id?: number;
  dialect?: string | undefined;
  query?: string | undefined;
  creator?: string | undefined;
  exercise?: GetExerciseDto;

  constructor(data?: IGetSolutionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dialect = _data['dialect'];
      this.query = _data['query'];
      this.creator = _data['creator'];
      this.exercise = _data['exercise']
        ? GetExerciseDto.fromJS(_data['exercise'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolutionDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolutionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dialect'] = this.dialect;
    data['query'] = this.query;
    data['creator'] = this.creator;
    data['exercise'] = this.exercise ? this.exercise.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetSolutionDto {
  id?: number;
  dialect?: string | undefined;
  query?: string | undefined;
  creator?: string | undefined;
  exercise?: GetExerciseDto;
}

export class GetSolutionDtoIEnumerableResult
  implements IGetSolutionDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetSolutionDto[] | undefined;

  constructor(data?: IGetSolutionDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GetSolutionDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetSolutionDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolutionDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetSolutionDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolutionDto[] | undefined;
}

export class GetSolvingDto implements IGetSolvingDto {
  assignedBy?: string | undefined;
  solver?: string | undefined;
  assignedAt?: Date;
  sentAt?: Date | undefined;
  deadLine?: Date | undefined;
  status?: string | undefined;
  exercise?: GetExerciseDto;

  constructor(data?: IGetSolvingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.assignedBy = _data['assignedBy'];
      this.solver = _data['solver'];
      this.assignedAt = _data['assignedAt']
        ? new Date(_data['assignedAt'].toString())
        : <any>undefined;
      this.sentAt = _data['sentAt']
        ? new Date(_data['sentAt'].toString())
        : <any>undefined;
      this.deadLine = _data['deadLine']
        ? new Date(_data['deadLine'].toString())
        : <any>undefined;
      this.status = _data['status'];
      this.exercise = _data['exercise']
        ? GetExerciseDto.fromJS(_data['exercise'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolvingDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolvingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['assignedBy'] = this.assignedBy;
    data['solver'] = this.solver;
    data['assignedAt'] = this.assignedAt
      ? this.assignedAt.toISOString()
      : <any>undefined;
    data['sentAt'] = this.sentAt ? this.sentAt.toISOString() : <any>undefined;
    data['deadLine'] = this.deadLine
      ? this.deadLine.toISOString()
      : <any>undefined;
    data['status'] = this.status;
    data['exercise'] = this.exercise ? this.exercise.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetSolvingDto {
  assignedBy?: string | undefined;
  solver?: string | undefined;
  assignedAt?: Date;
  sentAt?: Date | undefined;
  deadLine?: Date | undefined;
  status?: string | undefined;
  exercise?: GetExerciseDto;
}

export class GetSolvingDtoIEnumerableResult
  implements IGetSolvingDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto[] | undefined;

  constructor(data?: IGetSolvingDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GetSolvingDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetSolvingDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolvingDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetSolvingDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto[] | undefined;
}

export class GetSolvingDtoResult implements IGetSolvingDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto;

  constructor(data?: IGetSolvingDtoResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      this.value = _data['value']
        ? GetSolvingDto.fromJS(_data['value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolvingDtoResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolvingDtoResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetSolvingDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto;
}

export class GetUserDto implements IGetUserDto {
  id?: number;
  name?: string | undefined;

  constructor(data?: IGetUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any): GetUserDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    return data;
  }
}

export interface IGetUserDto {
  id?: number;
  name?: string | undefined;
}

export class Int32IEnumerableResult implements IInt32IEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: number[] | undefined;

  constructor(data?: IInt32IEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value']) this.value!.push(item);
      }
    }
  }

  static fromJS(data: any): Int32IEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new Int32IEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item);
    }
    return data;
  }
}

export interface IInt32IEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: number[] | undefined;
}

export class Int32Result implements IInt32Result {
  message?: string | undefined;
  success?: boolean;
  value?: number;

  constructor(data?: IInt32Result) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      this.value = _data['value'];
    }
  }

  static fromJS(data: any): Int32Result {
    data = typeof data === 'object' ? data : {};
    let result = new Int32Result();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    data['value'] = this.value;
    return data;
  }
}

export interface IInt32Result {
  message?: string | undefined;
  success?: boolean;
  value?: number;
}

export class LoginUserCommand implements ILoginUserCommand {
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: ILoginUserCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data['email'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): LoginUserCommand {
    data = typeof data === 'object' ? data : {};
    let result = new LoginUserCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['email'] = this.email;
    data['password'] = this.password;
    return data;
  }
}

export interface ILoginUserCommand {
  email?: string | undefined;
  password?: string | undefined;
}

export class RegisterUserCommand implements IRegisterUserCommand {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  confirmPassword?: string | undefined;
  dateOfBirth?: Date;

  constructor(data?: IRegisterUserCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data['firstName'];
      this.lastName = _data['lastName'];
      this.email = _data['email'];
      this.password = _data['password'];
      this.confirmPassword = _data['confirmPassword'];
      this.dateOfBirth = _data['dateOfBirth']
        ? new Date(_data['dateOfBirth'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): RegisterUserCommand {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterUserCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['firstName'] = this.firstName;
    data['lastName'] = this.lastName;
    data['email'] = this.email;
    data['password'] = this.password;
    data['confirmPassword'] = this.confirmPassword;
    data['dateOfBirth'] = this.dateOfBirth
      ? this.dateOfBirth.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IRegisterUserCommand {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  confirmPassword?: string | undefined;
  dateOfBirth?: Date;
}

export class Result implements IResult {
  message?: string | undefined;
  success?: boolean;

  constructor(data?: IResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
    }
  }

  static fromJS(data: any): Result {
    data = typeof data === 'object' ? data : {};
    let result = new Result();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    return data;
  }
}

export interface IResult {
  message?: string | undefined;
  success?: boolean;
}

export class SendQueryAdminCommand implements ISendQueryAdminCommand {
  query?: string | undefined;
  database?: string | undefined;

  constructor(data?: ISendQueryAdminCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.query = _data['query'];
      this.database = _data['database'];
    }
  }

  static fromJS(data: any): SendQueryAdminCommand {
    data = typeof data === 'object' ? data : {};
    let result = new SendQueryAdminCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['query'] = this.query;
    data['database'] = this.database;
    return data;
  }
}

export interface ISendQueryAdminCommand {
  query?: string | undefined;
  database?: string | undefined;
}

export class StringIEnumerableIEnumerableResult
  implements IStringIEnumerableIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: string[][] | undefined;

  constructor(data?: IStringIEnumerableIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
      this.success = _data['success'];
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value']) this.value!.push(item);
      }
    }
  }

  static fromJS(data: any): StringIEnumerableIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new StringIEnumerableIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    data['success'] = this.success;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item);
    }
    return data;
  }
}

export interface IStringIEnumerableIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: string[][] | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
