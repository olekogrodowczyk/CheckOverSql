//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(body: RegisterUserCommand | undefined): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Account/Register';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRegister(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRegister(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Int32Result>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Int32Result>;
        })
      );
  }

  protected processRegister(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  login(body: LoginUserCommand | undefined): Observable<StringResult> {
    let url_ = this.baseUrl + '/api/Account/Login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLogin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLogin(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<StringResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringResult>;
        })
      );
  }

  protected processLogin(response: HttpResponseBase): Observable<StringResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getLoggedUserId(): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Account/GetLoggedUserId';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetLoggedUserId(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetLoggedUserId(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Int32Result>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Int32Result>;
        })
      );
  }

  protected processGetLoggedUserId(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class DatabaseClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  getQueryValue(
    body: GetQueryValueQuery | undefined
  ): Observable<StringIEnumerableIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Database/GetQueryValue';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetQueryValue(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetQueryValue(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<StringIEnumerableIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringIEnumerableIEnumerableResult>;
        })
      );
  }

  protected processGetQueryValue(
    response: HttpResponseBase
  ): Observable<StringIEnumerableIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringIEnumerableIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getDatabaseNames(): Observable<StringIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Database/GetDatabaseNames';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDatabaseNames(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDatabaseNames(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<StringIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringIEnumerableResult>;
        })
      );
  }

  protected processGetDatabaseNames(
    response: HttpResponseBase
  ): Observable<StringIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param pageNumber (optional)
   * @param pageSize (optional)
   * @return Success
   */
  getQueryHistory(
    pageNumber: number | undefined,
    pageSize: number | undefined
  ): Observable<QueryDtoPaginatedListResult> {
    let url_ = this.baseUrl + '/api/Database/GetQueryHistory?';
    if (pageNumber === null)
      throw new Error("The parameter 'pageNumber' cannot be null.");
    else if (pageNumber !== undefined)
      url_ += 'PageNumber=' + encodeURIComponent('' + pageNumber) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'PageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetQueryHistory(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetQueryHistory(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<QueryDtoPaginatedListResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<QueryDtoPaginatedListResult>;
        })
      );
  }

  protected processGetQueryHistory(
    response: HttpResponseBase
  ): Observable<QueryDtoPaginatedListResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = QueryDtoPaginatedListResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class ExerciseClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createExercise(
    body: CreateExerciseCommand | undefined
  ): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Exercise/CreateExercise';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateExercise(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateExercise(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Int32Result>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Int32Result>;
        })
      );
  }

  protected processCreateExercise(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param pageNumber (optional)
   * @param pageSize (optional)
   * @return Success
   */
  getAllCreated(
    pageNumber: number | undefined,
    pageSize: number | undefined
  ): Observable<GetExerciseDtoPaginatedListResult> {
    let url_ = this.baseUrl + '/api/Exercise/GetAllCreated?';
    if (pageNumber === null)
      throw new Error("The parameter 'pageNumber' cannot be null.");
    else if (pageNumber !== undefined)
      url_ += 'PageNumber=' + encodeURIComponent('' + pageNumber) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'PageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllCreated(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllCreated(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetExerciseDtoPaginatedListResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetExerciseDtoPaginatedListResult>;
        })
      );
  }

  protected processGetAllCreated(
    response: HttpResponseBase
  ): Observable<GetExerciseDtoPaginatedListResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetExerciseDtoPaginatedListResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param pageNumber (optional)
   * @param pageSize (optional)
   * @return Success
   */
  getAllPublic(
    pageNumber: number | undefined,
    pageSize: number | undefined
  ): Observable<GetExerciseDtoPaginatedListResult> {
    let url_ = this.baseUrl + '/api/Exercise/GetAllPublic?';
    if (pageNumber === null)
      throw new Error("The parameter 'pageNumber' cannot be null.");
    else if (pageNumber !== undefined)
      url_ += 'PageNumber=' + encodeURIComponent('' + pageNumber) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'PageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllPublic(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllPublic(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetExerciseDtoPaginatedListResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetExerciseDtoPaginatedListResult>;
        })
      );
  }

  protected processGetAllPublic(
    response: HttpResponseBase
  ): Observable<GetExerciseDtoPaginatedListResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetExerciseDtoPaginatedListResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  assignExercise(
    body: AssignExerciseToUsersCommand | undefined
  ): Observable<Int32IEnumerableResult> {
    let url_ = this.baseUrl + '/api/Exercise/AssignExercise';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAssignExercise(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAssignExercise(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<Int32IEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Int32IEnumerableResult>;
        })
      );
  }

  protected processAssignExercise(
    response: HttpResponseBase
  ): Observable<Int32IEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32IEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  checkIfUserCanAssignExercise(): Observable<BooleanResult> {
    let url_ = this.baseUrl + '/api/Exercise/CheckIfUserCanAssignExercise';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCheckIfUserCanAssignExercise(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCheckIfUserCanAssignExercise(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<BooleanResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanResult>;
        })
      );
  }

  protected processCheckIfUserCanAssignExercise(
    response: HttpResponseBase
  ): Observable<BooleanResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class GroupClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param name (optional)
   * @param image (optional)
   * @return Success
   */
  createGroup(
    name: string | undefined,
    image: FileParameter | undefined
  ): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Group/CreateGroup';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = new FormData();
    if (name === null || name === undefined)
      throw new Error("The parameter 'name' cannot be null.");
    else content_.append('Name', name.toString());
    if (image === null || image === undefined)
      throw new Error("The parameter 'image' cannot be null.");
    else
      content_.append(
        'Image',
        image.data,
        image.fileName ? image.fileName : 'Image'
      );

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateGroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateGroup(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Int32Result>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Int32Result>;
        })
      );
  }

  protected processCreateGroup(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getUserGroups(): Observable<GetGroupDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Group/GetUserGroups';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUserGroups(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUserGroups(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetGroupDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetGroupDtoIEnumerableResult>;
        })
      );
  }

  protected processGetUserGroups(
    response: HttpResponseBase
  ): Observable<GetGroupDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetGroupDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  deletegroup(groupId: number): Observable<Result> {
    let url_ = this.baseUrl + '/api/Group/deletegroup/{groupId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{groupId}', encodeURIComponent('' + groupId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeletegroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeletegroup(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Result>;
            }
          } else
            return _observableThrow(response_) as any as Observable<Result>;
        })
      );
  }

  protected processDeletegroup(response: HttpResponseBase): Observable<Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllAssignments(
    groupId: number
  ): Observable<GetAssignmentDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Group/GetAllAssignments/{groupId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{groupId}', encodeURIComponent('' + groupId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllAssignments(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllAssignments(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetAssignmentDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetAssignmentDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAllAssignments(
    response: HttpResponseBase
  ): Observable<GetAssignmentDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetAssignmentDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getUserRoleGroup(groupId: number): Observable<StringResult> {
    let url_ = this.baseUrl + '/api/Group/GetUserRoleGroup/{groupId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{groupId}', encodeURIComponent('' + groupId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUserRoleGroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUserRoleGroup(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<StringResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringResult>;
        })
      );
  }

  protected processGetUserRoleGroup(
    response: HttpResponseBase
  ): Observable<StringResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllAssignableGroups(): Observable<GetGroupDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Group/GetAllAssignableGroups';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllAssignableGroups(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllAssignableGroups(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetGroupDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetGroupDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAllAssignableGroups(
    response: HttpResponseBase
  ): Observable<GetGroupDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetGroupDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class GroupRoleClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getAll(): Observable<GroupRoleDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/GroupRole/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GroupRoleDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GroupRoleDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<GroupRoleDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GroupRoleDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class InvitationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createInvitation(
    body: CreateInvitationCommand | undefined
  ): Observable<Int32Result> {
    let url_ = this.baseUrl + '/api/Invitation/CreateInvitation';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateInvitation(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateInvitation(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Int32Result>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Int32Result>;
        })
      );
  }

  protected processCreateInvitation(
    response: HttpResponseBase
  ): Observable<Int32Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Int32Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param queryType (optional)
   * @return Success
   */
  getAll(
    queryType: string | undefined
  ): Observable<GetInvitationDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Invitation/GetAll?';
    if (queryType === null)
      throw new Error("The parameter 'queryType' cannot be null.");
    else if (queryType !== undefined)
      url_ += 'queryType=' + encodeURIComponent('' + queryType) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetInvitationDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetInvitationDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<GetInvitationDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetInvitationDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  accept(invitationId: number): Observable<Result> {
    let url_ = this.baseUrl + '/api/Invitation/Accept/{invitationId}';
    if (invitationId === undefined || invitationId === null)
      throw new Error("The parameter 'invitationId' must be defined.");
    url_ = url_.replace(
      '{invitationId}',
      encodeURIComponent('' + invitationId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('patch', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAccept(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAccept(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Result>;
            }
          } else
            return _observableThrow(response_) as any as Observable<Result>;
        })
      );
  }

  protected processAccept(response: HttpResponseBase): Observable<Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  reject(invitationId: number): Observable<Result> {
    let url_ = this.baseUrl + '/api/Invitation/Reject/{invitationId}';
    if (invitationId === undefined || invitationId === null)
      throw new Error("The parameter 'invitationId' must be defined.");
    url_ = url_.replace(
      '{invitationId}',
      encodeURIComponent('' + invitationId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('patch', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processReject(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processReject(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Result>;
            }
          } else
            return _observableThrow(response_) as any as Observable<Result>;
        })
      );
  }

  protected processReject(response: HttpResponseBase): Observable<Result> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Result.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class SolutionClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getAll(): Observable<GetSolutionDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solution/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetSolutionDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetSolutionDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<GetSolutionDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolutionDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createSolution(
    body: CreateSolutionCommand | undefined
  ): Observable<GetComparisonDtoResult> {
    let url_ = this.baseUrl + '/api/Solution/CreateSolution';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateSolution(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateSolution(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetComparisonDtoResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetComparisonDtoResult>;
        })
      );
  }

  protected processCreateSolution(
    response: HttpResponseBase
  ): Observable<GetComparisonDtoResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetComparisonDtoResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param exerciseId (optional)
   * @return Success
   */
  getQueryData(
    exerciseId: number | undefined,
    solutionId: number
  ): Observable<StringIEnumerableIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solution/GetQueryData/{solutionId}?';
    if (solutionId === undefined || solutionId === null)
      throw new Error("The parameter 'solutionId' must be defined.");
    url_ = url_.replace('{solutionId}', encodeURIComponent('' + solutionId));
    if (exerciseId === null)
      throw new Error("The parameter 'exerciseId' cannot be null.");
    else if (exerciseId !== undefined)
      url_ += 'exerciseId=' + encodeURIComponent('' + exerciseId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetQueryData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetQueryData(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<StringIEnumerableIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringIEnumerableIEnumerableResult>;
        })
      );
  }

  protected processGetQueryData(
    response: HttpResponseBase
  ): Observable<StringIEnumerableIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringIEnumerableIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param exerciseId (optional)
   * @return Success
   */
  getLastSolutionSentIntoExercise(
    exerciseId: number | undefined
  ): Observable<GetSolutionDtoResult> {
    let url_ = this.baseUrl + '/api/Solution/GetLastSolutionSentIntoExercise?';
    if (exerciseId === null)
      throw new Error("The parameter 'exerciseId' cannot be null.");
    else if (exerciseId !== undefined)
      url_ += 'ExerciseId=' + encodeURIComponent('' + exerciseId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetLastSolutionSentIntoExercise(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetLastSolutionSentIntoExercise(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetSolutionDtoResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetSolutionDtoResult>;
        })
      );
  }

  protected processGetLastSolutionSentIntoExercise(
    response: HttpResponseBase
  ): Observable<GetSolutionDtoResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolutionDtoResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class SolvingClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getAll(): Observable<GetSolvingDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solving/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetSolvingDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetSolvingDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<GetSolvingDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolvingDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getById(solvingId: number): Observable<GetSolvingDtoResult> {
    let url_ = this.baseUrl + '/api/Solving/GetById/{solvingId}';
    if (solvingId === undefined || solvingId === null)
      throw new Error("The parameter 'solvingId' must be defined.");
    url_ = url_.replace('{solvingId}', encodeURIComponent('' + solvingId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetSolvingDtoResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetSolvingDtoResult>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<GetSolvingDtoResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolvingDtoResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param status (optional)
   * @return Success
   */
  getAllByStatus(
    status: string | undefined
  ): Observable<GetSolvingDtoIEnumerableResult> {
    let url_ = this.baseUrl + '/api/Solving/GetAllByStatus?';
    if (status === null)
      throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined)
      url_ += 'Status=' + encodeURIComponent('' + status) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllByStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllByStatus(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GetSolvingDtoIEnumerableResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetSolvingDtoIEnumerableResult>;
        })
      );
  }

  protected processGetAllByStatus(
    response: HttpResponseBase
  ): Observable<GetSolvingDtoIEnumerableResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetSolvingDtoIEnumerableResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ErrorResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class AssignExerciseToUsersCommand
  implements IAssignExerciseToUsersCommand
{
  exerciseId?: number;
  groupId?: number;
  deadLine?: Date;

  constructor(data?: IAssignExerciseToUsersCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.exerciseId = _data['ExerciseId'];
      this.groupId = _data['GroupId'];
      this.deadLine = _data['DeadLine']
        ? new Date(_data['DeadLine'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): AssignExerciseToUsersCommand {
    data = typeof data === 'object' ? data : {};
    let result = new AssignExerciseToUsersCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ExerciseId'] = this.exerciseId;
    data['GroupId'] = this.groupId;
    data['DeadLine'] = this.deadLine
      ? this.deadLine.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IAssignExerciseToUsersCommand {
  exerciseId?: number;
  groupId?: number;
  deadLine?: Date;
}

export class BooleanResult implements IBooleanResult {
  message?: string | undefined;
  success?: boolean;
  value?: boolean;

  constructor(data?: IBooleanResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value'];
    }
  }

  static fromJS(data: any): BooleanResult {
    data = typeof data === 'object' ? data : {};
    let result = new BooleanResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value;
    return data;
  }
}

export interface IBooleanResult {
  message?: string | undefined;
  success?: boolean;
  value?: boolean;
}

export class CreateExerciseCommand implements ICreateExerciseCommand {
  title?: string | undefined;
  description?: string | undefined;
  databaseName?: string | undefined;
  validAnswer?: string | undefined;
  isPrivate?: boolean;

  constructor(data?: ICreateExerciseCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['Title'];
      this.description = _data['Description'];
      this.databaseName = _data['DatabaseName'];
      this.validAnswer = _data['ValidAnswer'];
      this.isPrivate = _data['IsPrivate'];
    }
  }

  static fromJS(data: any): CreateExerciseCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateExerciseCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Title'] = this.title;
    data['Description'] = this.description;
    data['DatabaseName'] = this.databaseName;
    data['ValidAnswer'] = this.validAnswer;
    data['IsPrivate'] = this.isPrivate;
    return data;
  }
}

export interface ICreateExerciseCommand {
  title?: string | undefined;
  description?: string | undefined;
  databaseName?: string | undefined;
  validAnswer?: string | undefined;
  isPrivate?: boolean;
}

export class CreateInvitationCommand implements ICreateInvitationCommand {
  receiverEmail?: string | undefined;
  roleName?: string | undefined;
  groupId?: number;

  constructor(data?: ICreateInvitationCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.receiverEmail = _data['ReceiverEmail'];
      this.roleName = _data['RoleName'];
      this.groupId = _data['GroupId'];
    }
  }

  static fromJS(data: any): CreateInvitationCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateInvitationCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ReceiverEmail'] = this.receiverEmail;
    data['RoleName'] = this.roleName;
    data['GroupId'] = this.groupId;
    return data;
  }
}

export interface ICreateInvitationCommand {
  receiverEmail?: string | undefined;
  roleName?: string | undefined;
  groupId?: number;
}

export class CreateSolutionCommand implements ICreateSolutionCommand {
  query?: string | undefined;
  exerciseId?: number;

  constructor(data?: ICreateSolutionCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.query = _data['Query'];
      this.exerciseId = _data['ExerciseId'];
    }
  }

  static fromJS(data: any): CreateSolutionCommand {
    data = typeof data === 'object' ? data : {};
    let result = new CreateSolutionCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Query'] = this.query;
    data['ExerciseId'] = this.exerciseId;
    return data;
  }
}

export interface ICreateSolutionCommand {
  query?: string | undefined;
  exerciseId?: number;
}

export class ErrorResult implements IErrorResult {
  message?: string | undefined;
  errors?: { [key: string]: string[] } | undefined;
  success?: boolean;

  constructor(data?: IErrorResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      if (_data['Errors']) {
        this.errors = {} as any;
        for (let key in _data['Errors']) {
          if (_data['Errors'].hasOwnProperty(key))
            (<any>this.errors)![key] =
              _data['Errors'][key] !== undefined ? _data['Errors'][key] : [];
        }
      }
      this.success = _data['Success'];
    }
  }

  static fromJS(data: any): ErrorResult {
    data = typeof data === 'object' ? data : {};
    let result = new ErrorResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    if (this.errors) {
      data['Errors'] = {};
      for (let key in this.errors) {
        if (this.errors.hasOwnProperty(key))
          (<any>data['Errors'])[key] = this.errors[key];
      }
    }
    data['Success'] = this.success;
    return data;
  }
}

export interface IErrorResult {
  message?: string | undefined;
  errors?: { [key: string]: string[] } | undefined;
  success?: boolean;
}

export class GetAssignmentDto implements IGetAssignmentDto {
  user?: GetUserDto;
  role?: string | undefined;
  joined?: Date | undefined;

  constructor(data?: IGetAssignmentDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user = _data['User']
        ? GetUserDto.fromJS(_data['User'])
        : <any>undefined;
      this.role = _data['Role'];
      this.joined = _data['Joined']
        ? new Date(_data['Joined'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetAssignmentDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetAssignmentDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['User'] = this.user ? this.user.toJSON() : <any>undefined;
    data['Role'] = this.role;
    data['Joined'] = this.joined ? this.joined.toISOString() : <any>undefined;
    return data;
  }
}

export interface IGetAssignmentDto {
  user?: GetUserDto;
  role?: string | undefined;
  joined?: Date | undefined;
}

export class GetAssignmentDtoIEnumerableResult
  implements IGetAssignmentDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetAssignmentDto[] | undefined;

  constructor(data?: IGetAssignmentDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value'])
          this.value!.push(GetAssignmentDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetAssignmentDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetAssignmentDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetAssignmentDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetAssignmentDto[] | undefined;
}

export class GetComparisonDto implements IGetComparisonDto {
  solutionId?: number;
  solutionSolver?: string | undefined;
  exerciseId?: number;
  exerciseTitle?: string | undefined;
  created?: Date;
  result?: boolean;

  constructor(data?: IGetComparisonDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.solutionId = _data['SolutionId'];
      this.solutionSolver = _data['SolutionSolver'];
      this.exerciseId = _data['ExerciseId'];
      this.exerciseTitle = _data['ExerciseTitle'];
      this.created = _data['Created']
        ? new Date(_data['Created'].toString())
        : <any>undefined;
      this.result = _data['Result'];
    }
  }

  static fromJS(data: any): GetComparisonDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetComparisonDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['SolutionId'] = this.solutionId;
    data['SolutionSolver'] = this.solutionSolver;
    data['ExerciseId'] = this.exerciseId;
    data['ExerciseTitle'] = this.exerciseTitle;
    data['Created'] = this.created
      ? this.created.toISOString()
      : <any>undefined;
    data['Result'] = this.result;
    return data;
  }
}

export interface IGetComparisonDto {
  solutionId?: number;
  solutionSolver?: string | undefined;
  exerciseId?: number;
  exerciseTitle?: string | undefined;
  created?: Date;
  result?: boolean;
}

export class GetComparisonDtoResult implements IGetComparisonDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetComparisonDto;

  constructor(data?: IGetComparisonDtoResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value']
        ? GetComparisonDto.fromJS(_data['Value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetComparisonDtoResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetComparisonDtoResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetComparisonDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetComparisonDto;
}

export class GetExerciseDto implements IGetExerciseDto {
  id?: number;
  title?: string | undefined;
  description?: string | undefined;
  creator?: string | undefined;
  databaseId?: number;
  databaseName?: string | undefined;
  creationTime?: string | undefined;
  lastAnswer?: string | undefined;
  passed?: boolean;

  constructor(data?: IGetExerciseDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.title = _data['Title'];
      this.description = _data['Description'];
      this.creator = _data['Creator'];
      this.databaseId = _data['DatabaseId'];
      this.databaseName = _data['DatabaseName'];
      this.creationTime = _data['CreationTime'];
      this.lastAnswer = _data['LastAnswer'];
      this.passed = _data['Passed'];
    }
  }

  static fromJS(data: any): GetExerciseDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetExerciseDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['Title'] = this.title;
    data['Description'] = this.description;
    data['Creator'] = this.creator;
    data['DatabaseId'] = this.databaseId;
    data['DatabaseName'] = this.databaseName;
    data['CreationTime'] = this.creationTime;
    data['LastAnswer'] = this.lastAnswer;
    data['Passed'] = this.passed;
    return data;
  }
}

export interface IGetExerciseDto {
  id?: number;
  title?: string | undefined;
  description?: string | undefined;
  creator?: string | undefined;
  databaseId?: number;
  databaseName?: string | undefined;
  creationTime?: string | undefined;
  lastAnswer?: string | undefined;
  passed?: boolean;
}

export class GetExerciseDtoPaginatedList
  implements IGetExerciseDtoPaginatedList
{
  items?: GetExerciseDto[] | undefined;
  pageNumber?: number;
  totalPages?: number;
  totalCount?: number;
  readonly hasPreviousPage?: boolean;
  readonly hasNextPage?: boolean;

  constructor(data?: IGetExerciseDtoPaginatedList) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['Items'])) {
        this.items = [] as any;
        for (let item of _data['Items'])
          this.items!.push(GetExerciseDto.fromJS(item));
      }
      this.pageNumber = _data['PageNumber'];
      this.totalPages = _data['TotalPages'];
      this.totalCount = _data['TotalCount'];
      (<any>this).hasPreviousPage = _data['HasPreviousPage'];
      (<any>this).hasNextPage = _data['HasNextPage'];
    }
  }

  static fromJS(data: any): GetExerciseDtoPaginatedList {
    data = typeof data === 'object' ? data : {};
    let result = new GetExerciseDtoPaginatedList();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['Items'] = [];
      for (let item of this.items) data['Items'].push(item.toJSON());
    }
    data['PageNumber'] = this.pageNumber;
    data['TotalPages'] = this.totalPages;
    data['TotalCount'] = this.totalCount;
    data['HasPreviousPage'] = this.hasPreviousPage;
    data['HasNextPage'] = this.hasNextPage;
    return data;
  }
}

export interface IGetExerciseDtoPaginatedList {
  items?: GetExerciseDto[] | undefined;
  pageNumber?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class GetExerciseDtoPaginatedListResult
  implements IGetExerciseDtoPaginatedListResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetExerciseDtoPaginatedList;

  constructor(data?: IGetExerciseDtoPaginatedListResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value']
        ? GetExerciseDtoPaginatedList.fromJS(_data['Value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetExerciseDtoPaginatedListResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetExerciseDtoPaginatedListResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetExerciseDtoPaginatedListResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetExerciseDtoPaginatedList;
}

export class GetGroupDto implements IGetGroupDto {
  id?: number;
  name?: string | undefined;
  imagePath?: string | undefined;

  constructor(data?: IGetGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.name = _data['Name'];
      this.imagePath = _data['ImagePath'];
    }
  }

  static fromJS(data: any): GetGroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetGroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['Name'] = this.name;
    data['ImagePath'] = this.imagePath;
    return data;
  }
}

export interface IGetGroupDto {
  id?: number;
  name?: string | undefined;
  imagePath?: string | undefined;
}

export class GetGroupDtoIEnumerableResult
  implements IGetGroupDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetGroupDto[] | undefined;

  constructor(data?: IGetGroupDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value'])
          this.value!.push(GetGroupDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetGroupDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetGroupDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetGroupDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetGroupDto[] | undefined;
}

export class GetInvitationDto implements IGetInvitationDto {
  id?: number;
  groupName?: string | undefined;
  sender?: string | undefined;
  senderId?: number;
  receiver?: string | undefined;
  receiverId?: number;
  status?: string | undefined;
  roleName?: string | undefined;
  sentAt?: Date;
  answeredAt?: Date;

  constructor(data?: IGetInvitationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.groupName = _data['GroupName'];
      this.sender = _data['Sender'];
      this.senderId = _data['SenderId'];
      this.receiver = _data['Receiver'];
      this.receiverId = _data['ReceiverId'];
      this.status = _data['Status'];
      this.roleName = _data['RoleName'];
      this.sentAt = _data['SentAt']
        ? new Date(_data['SentAt'].toString())
        : <any>undefined;
      this.answeredAt = _data['AnsweredAt']
        ? new Date(_data['AnsweredAt'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetInvitationDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetInvitationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['GroupName'] = this.groupName;
    data['Sender'] = this.sender;
    data['SenderId'] = this.senderId;
    data['Receiver'] = this.receiver;
    data['ReceiverId'] = this.receiverId;
    data['Status'] = this.status;
    data['RoleName'] = this.roleName;
    data['SentAt'] = this.sentAt ? this.sentAt.toISOString() : <any>undefined;
    data['AnsweredAt'] = this.answeredAt
      ? this.answeredAt.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IGetInvitationDto {
  id?: number;
  groupName?: string | undefined;
  sender?: string | undefined;
  senderId?: number;
  receiver?: string | undefined;
  receiverId?: number;
  status?: string | undefined;
  roleName?: string | undefined;
  sentAt?: Date;
  answeredAt?: Date;
}

export class GetInvitationDtoIEnumerableResult
  implements IGetInvitationDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetInvitationDto[] | undefined;

  constructor(data?: IGetInvitationDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value'])
          this.value!.push(GetInvitationDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetInvitationDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetInvitationDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetInvitationDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetInvitationDto[] | undefined;
}

export class GetQueryValueQuery implements IGetQueryValueQuery {
  databaseName?: string | undefined;
  query?: string | undefined;
  toQueryHistory?: boolean;

  constructor(data?: IGetQueryValueQuery) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.databaseName = _data['DatabaseName'];
      this.query = _data['Query'];
      this.toQueryHistory = _data['ToQueryHistory'];
    }
  }

  static fromJS(data: any): GetQueryValueQuery {
    data = typeof data === 'object' ? data : {};
    let result = new GetQueryValueQuery();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['DatabaseName'] = this.databaseName;
    data['Query'] = this.query;
    data['ToQueryHistory'] = this.toQueryHistory;
    return data;
  }
}

export interface IGetQueryValueQuery {
  databaseName?: string | undefined;
  query?: string | undefined;
  toQueryHistory?: boolean;
}

export class GetSolutionDto implements IGetSolutionDto {
  id?: number;
  dialect?: string | undefined;
  query?: string | undefined;
  creator?: string | undefined;
  outcome?: string | undefined;
  exerciseId?: number;
  creationTime?: Date;

  constructor(data?: IGetSolutionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.dialect = _data['Dialect'];
      this.query = _data['Query'];
      this.creator = _data['Creator'];
      this.outcome = _data['Outcome'];
      this.exerciseId = _data['ExerciseId'];
      this.creationTime = _data['CreationTime']
        ? new Date(_data['CreationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolutionDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolutionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['Dialect'] = this.dialect;
    data['Query'] = this.query;
    data['Creator'] = this.creator;
    data['Outcome'] = this.outcome;
    data['ExerciseId'] = this.exerciseId;
    data['CreationTime'] = this.creationTime
      ? this.creationTime.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IGetSolutionDto {
  id?: number;
  dialect?: string | undefined;
  query?: string | undefined;
  creator?: string | undefined;
  outcome?: string | undefined;
  exerciseId?: number;
  creationTime?: Date;
}

export class GetSolutionDtoIEnumerableResult
  implements IGetSolutionDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetSolutionDto[] | undefined;

  constructor(data?: IGetSolutionDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value'])
          this.value!.push(GetSolutionDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetSolutionDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolutionDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetSolutionDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolutionDto[] | undefined;
}

export class GetSolutionDtoResult implements IGetSolutionDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolutionDto;

  constructor(data?: IGetSolutionDtoResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value']
        ? GetSolutionDto.fromJS(_data['Value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolutionDtoResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolutionDtoResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetSolutionDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolutionDto;
}

export class GetSolvingDto implements IGetSolvingDto {
  id?: number;
  assignedBy?: string | undefined;
  solver?: string | undefined;
  assignedAt?: Date;
  sentAt?: Date | undefined;
  deadLine?: Date | undefined;
  status?: string | undefined;
  group?: string | undefined;
  exercise?: GetExerciseDto;

  constructor(data?: IGetSolvingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.assignedBy = _data['AssignedBy'];
      this.solver = _data['Solver'];
      this.assignedAt = _data['AssignedAt']
        ? new Date(_data['AssignedAt'].toString())
        : <any>undefined;
      this.sentAt = _data['SentAt']
        ? new Date(_data['SentAt'].toString())
        : <any>undefined;
      this.deadLine = _data['DeadLine']
        ? new Date(_data['DeadLine'].toString())
        : <any>undefined;
      this.status = _data['Status'];
      this.group = _data['Group'];
      this.exercise = _data['Exercise']
        ? GetExerciseDto.fromJS(_data['Exercise'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolvingDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolvingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['AssignedBy'] = this.assignedBy;
    data['Solver'] = this.solver;
    data['AssignedAt'] = this.assignedAt
      ? this.assignedAt.toISOString()
      : <any>undefined;
    data['SentAt'] = this.sentAt ? this.sentAt.toISOString() : <any>undefined;
    data['DeadLine'] = this.deadLine
      ? this.deadLine.toISOString()
      : <any>undefined;
    data['Status'] = this.status;
    data['Group'] = this.group;
    data['Exercise'] = this.exercise ? this.exercise.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetSolvingDto {
  id?: number;
  assignedBy?: string | undefined;
  solver?: string | undefined;
  assignedAt?: Date;
  sentAt?: Date | undefined;
  deadLine?: Date | undefined;
  status?: string | undefined;
  group?: string | undefined;
  exercise?: GetExerciseDto;
}

export class GetSolvingDtoIEnumerableResult
  implements IGetSolvingDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto[] | undefined;

  constructor(data?: IGetSolvingDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value'])
          this.value!.push(GetSolvingDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GetSolvingDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolvingDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGetSolvingDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto[] | undefined;
}

export class GetSolvingDtoResult implements IGetSolvingDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto;

  constructor(data?: IGetSolvingDtoResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value']
        ? GetSolvingDto.fromJS(_data['Value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetSolvingDtoResult {
    data = typeof data === 'object' ? data : {};
    let result = new GetSolvingDtoResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetSolvingDtoResult {
  message?: string | undefined;
  success?: boolean;
  value?: GetSolvingDto;
}

export class GetUserDto implements IGetUserDto {
  id?: number;
  name?: string | undefined;

  constructor(data?: IGetUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.name = _data['Name'];
    }
  }

  static fromJS(data: any): GetUserDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['Name'] = this.name;
    return data;
  }
}

export interface IGetUserDto {
  id?: number;
  name?: string | undefined;
}

export class GroupRoleDto implements IGroupRoleDto {
  id?: number;
  name?: string | undefined;

  constructor(data?: IGroupRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['Id'];
      this.name = _data['Name'];
    }
  }

  static fromJS(data: any): GroupRoleDto {
    data = typeof data === 'object' ? data : {};
    let result = new GroupRoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Id'] = this.id;
    data['Name'] = this.name;
    return data;
  }
}

export interface IGroupRoleDto {
  id?: number;
  name?: string | undefined;
}

export class GroupRoleDtoIEnumerableResult
  implements IGroupRoleDtoIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: GroupRoleDto[] | undefined;

  constructor(data?: IGroupRoleDtoIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value'])
          this.value!.push(GroupRoleDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GroupRoleDtoIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new GroupRoleDtoIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGroupRoleDtoIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: GroupRoleDto[] | undefined;
}

export class Int32IEnumerableResult implements IInt32IEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: number[] | undefined;

  constructor(data?: IInt32IEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value']) this.value!.push(item);
      }
    }
  }

  static fromJS(data: any): Int32IEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new Int32IEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item);
    }
    return data;
  }
}

export interface IInt32IEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: number[] | undefined;
}

export class Int32Result implements IInt32Result {
  message?: string | undefined;
  success?: boolean;
  value?: number;

  constructor(data?: IInt32Result) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value'];
    }
  }

  static fromJS(data: any): Int32Result {
    data = typeof data === 'object' ? data : {};
    let result = new Int32Result();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value;
    return data;
  }
}

export interface IInt32Result {
  message?: string | undefined;
  success?: boolean;
  value?: number;
}

export class LoginUserCommand implements ILoginUserCommand {
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: ILoginUserCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data['Email'];
      this.password = _data['Password'];
    }
  }

  static fromJS(data: any): LoginUserCommand {
    data = typeof data === 'object' ? data : {};
    let result = new LoginUserCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Email'] = this.email;
    data['Password'] = this.password;
    return data;
  }
}

export interface ILoginUserCommand {
  email?: string | undefined;
  password?: string | undefined;
}

export class QueryDto implements IQueryDto {
  queryValue?: string | undefined;
  created?: Date;
  databaseId?: number;
  databaseName?: string | undefined;

  constructor(data?: IQueryDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.queryValue = _data['QueryValue'];
      this.created = _data['Created']
        ? new Date(_data['Created'].toString())
        : <any>undefined;
      this.databaseId = _data['DatabaseId'];
      this.databaseName = _data['DatabaseName'];
    }
  }

  static fromJS(data: any): QueryDto {
    data = typeof data === 'object' ? data : {};
    let result = new QueryDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['QueryValue'] = this.queryValue;
    data['Created'] = this.created
      ? this.created.toISOString()
      : <any>undefined;
    data['DatabaseId'] = this.databaseId;
    data['DatabaseName'] = this.databaseName;
    return data;
  }
}

export interface IQueryDto {
  queryValue?: string | undefined;
  created?: Date;
  databaseId?: number;
  databaseName?: string | undefined;
}

export class QueryDtoPaginatedList implements IQueryDtoPaginatedList {
  items?: QueryDto[] | undefined;
  pageNumber?: number;
  totalPages?: number;
  totalCount?: number;
  readonly hasPreviousPage?: boolean;
  readonly hasNextPage?: boolean;

  constructor(data?: IQueryDtoPaginatedList) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['Items'])) {
        this.items = [] as any;
        for (let item of _data['Items'])
          this.items!.push(QueryDto.fromJS(item));
      }
      this.pageNumber = _data['PageNumber'];
      this.totalPages = _data['TotalPages'];
      this.totalCount = _data['TotalCount'];
      (<any>this).hasPreviousPage = _data['HasPreviousPage'];
      (<any>this).hasNextPage = _data['HasNextPage'];
    }
  }

  static fromJS(data: any): QueryDtoPaginatedList {
    data = typeof data === 'object' ? data : {};
    let result = new QueryDtoPaginatedList();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['Items'] = [];
      for (let item of this.items) data['Items'].push(item.toJSON());
    }
    data['PageNumber'] = this.pageNumber;
    data['TotalPages'] = this.totalPages;
    data['TotalCount'] = this.totalCount;
    data['HasPreviousPage'] = this.hasPreviousPage;
    data['HasNextPage'] = this.hasNextPage;
    return data;
  }
}

export interface IQueryDtoPaginatedList {
  items?: QueryDto[] | undefined;
  pageNumber?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class QueryDtoPaginatedListResult
  implements IQueryDtoPaginatedListResult
{
  message?: string | undefined;
  success?: boolean;
  value?: QueryDtoPaginatedList;

  constructor(data?: IQueryDtoPaginatedListResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value']
        ? QueryDtoPaginatedList.fromJS(_data['Value'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): QueryDtoPaginatedListResult {
    data = typeof data === 'object' ? data : {};
    let result = new QueryDtoPaginatedListResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value ? this.value.toJSON() : <any>undefined;
    return data;
  }
}

export interface IQueryDtoPaginatedListResult {
  message?: string | undefined;
  success?: boolean;
  value?: QueryDtoPaginatedList;
}

export class RegisterUserCommand implements IRegisterUserCommand {
  firstName?: string | undefined;
  lastName?: string | undefined;
  login?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  confirmPassword?: string | undefined;
  dateOfBirth?: Date;

  constructor(data?: IRegisterUserCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data['FirstName'];
      this.lastName = _data['LastName'];
      this.login = _data['Login'];
      this.email = _data['Email'];
      this.password = _data['Password'];
      this.confirmPassword = _data['ConfirmPassword'];
      this.dateOfBirth = _data['DateOfBirth']
        ? new Date(_data['DateOfBirth'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): RegisterUserCommand {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterUserCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['FirstName'] = this.firstName;
    data['LastName'] = this.lastName;
    data['Login'] = this.login;
    data['Email'] = this.email;
    data['Password'] = this.password;
    data['ConfirmPassword'] = this.confirmPassword;
    data['DateOfBirth'] = this.dateOfBirth
      ? this.dateOfBirth.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IRegisterUserCommand {
  firstName?: string | undefined;
  lastName?: string | undefined;
  login?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  confirmPassword?: string | undefined;
  dateOfBirth?: Date;
}

export class Result implements IResult {
  message?: string | undefined;
  success?: boolean;

  constructor(data?: IResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
    }
  }

  static fromJS(data: any): Result {
    data = typeof data === 'object' ? data : {};
    let result = new Result();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    return data;
  }
}

export interface IResult {
  message?: string | undefined;
  success?: boolean;
}

export class StringIEnumerableIEnumerableResult
  implements IStringIEnumerableIEnumerableResult
{
  message?: string | undefined;
  success?: boolean;
  value?: string[][] | undefined;

  constructor(data?: IStringIEnumerableIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value']) this.value!.push(item);
      }
    }
  }

  static fromJS(data: any): StringIEnumerableIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new StringIEnumerableIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item);
    }
    return data;
  }
}

export interface IStringIEnumerableIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: string[][] | undefined;
}

export class StringIEnumerableResult implements IStringIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: string[] | undefined;

  constructor(data?: IStringIEnumerableResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      if (Array.isArray(_data['Value'])) {
        this.value = [] as any;
        for (let item of _data['Value']) this.value!.push(item);
      }
    }
  }

  static fromJS(data: any): StringIEnumerableResult {
    data = typeof data === 'object' ? data : {};
    let result = new StringIEnumerableResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    if (Array.isArray(this.value)) {
      data['Value'] = [];
      for (let item of this.value) data['Value'].push(item);
    }
    return data;
  }
}

export interface IStringIEnumerableResult {
  message?: string | undefined;
  success?: boolean;
  value?: string[] | undefined;
}

export class StringResult implements IStringResult {
  message?: string | undefined;
  success?: boolean;
  value?: string | undefined;

  constructor(data?: IStringResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['Message'];
      this.success = _data['Success'];
      this.value = _data['Value'];
    }
  }

  static fromJS(data: any): StringResult {
    data = typeof data === 'object' ? data : {};
    let result = new StringResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['Message'] = this.message;
    data['Success'] = this.success;
    data['Value'] = this.value;
    return data;
  }
}

export interface IStringResult {
  message?: string | undefined;
  success?: boolean;
  value?: string | undefined;
}

export interface FileParameter {
  data: any;
  fileName: string;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
